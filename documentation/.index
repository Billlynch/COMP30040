<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QDOCINDEX>
<INDEX url="" title="" version="" project="">
    <namespace threadsafety="unspecified" name="" status="active" access="public" documented="false">
        <class threadsafety="unspecified" name="Loop_graph" href="loop-graph.html" status="internal" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="24">
            <function threadsafety="unspecified" name="addMapToSeries" fullname="Loop_graph::addMapToSeries" href="loop-graph.html#addMapToSeries" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="37" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="Loop_graph::addMapToSeries this converts the data in the graph map into series for the QT chart library to understand. It makes two series so that two lines are produced on the same x position" signature="void addMapToSeries()"/>
            <function threadsafety="unspecified" name="showChart" fullname="Loop_graph::showChart" href="loop-graph.html#showChart" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="38" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="Loop_graph::showChart This adds the series to the chart and sets the axis. Plus the axis labels" signature="void showChart()"/>
            <function threadsafety="unspecified" name="updateSeries" fullname="Loop_graph::updateSeries" href="loop-graph.html#updateSeries" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="44" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void updateSeries(Eigen::Vector2cd Er)">
                <parameter type="Eigen::Vector2cd" name="Er" default=""/>
            </function>
            <function threadsafety="unspecified" name="~Loop_graph" fullname="Loop_graph::~Loop_graph" href="loop-graph.html#dtor.Loop_graph" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="28" virtual="non" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="Loop_graph::~Loop_graph clear the memory on destruction of this object" signature="~Loop_graph()"/>
            <variable threadsafety="unspecified" name="m_chart" fullname="Loop_graph::m_chart" href="loop-graph.html#m_chart-var" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="34" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="m_coersivity" fullname="Loop_graph::m_coersivity" href="loop-graph.html#m_coersivity-var" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="35" type="double *" static="false"/>
            <variable threadsafety="unspecified" name="m_graphMap" fullname="Loop_graph::m_graphMap" href="loop-graph.html#m_graphMap-var" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="33" type="LoopGraphMap *" static="false"/>
            <variable threadsafety="unspecified" name="m_series_decrease" fullname="Loop_graph::m_series_decrease" href="loop-graph.html#m_series_decrease-var" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="32" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="m_series_increase" fullname="Loop_graph::m_series_increase" href="loop-graph.html#m_series_increase-var" status="active" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="31" type="int *" static="false"/>
        </class>
        <typedef threadsafety="unspecified" name="LoopGraphItem" status="internal" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="15"/>
        <typedef threadsafety="unspecified" name="LoopGraphMap" status="internal" access="private" location="Loop_graph.h" filepath="/Users/Bill/Documents/uni/COMP30040/Loop_graph.h" lineno="16"/>
        <class threadsafety="unspecified" name="CollideableObject" href="collideableobject.html" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="18" since="v1" brief="The base class which must be extended by all objects which we want to collide in the ray tracing simulation. It enforces methods which are required by the algorithm">
            <function threadsafety="unspecified" name="CollideableObject" fullname="CollideableObject::CollideableObject" href="collideableobject.html#CollideableObject" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="32" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="CollideableObject(Eigen::Vector3d location, int side, Eigen::Vector3d normal)">
                <parameter type="Eigen::Vector3d" name="location" default=""/>
                <parameter type="int" name="side" default=""/>
                <parameter type="Eigen::Vector3d" name="normal" default=""/>
            </function>
            <function threadsafety="unspecified" name="getType" fullname="CollideableObject::getType" href="collideableobject.html#getType" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="41" virtual="pure" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="ObjectType" signature="ObjectType getType() = 0"/>
            <function threadsafety="unspecified" name="interceptPlane" fullname="CollideableObject::interceptPlane" href="collideableobject.html#interceptPlane" status="active" access="protected" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="27" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool interceptPlane(Ray &amp;ray, double &amp;t)">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="double &amp;" name="t" default=""/>
            </function>
            <function threadsafety="unspecified" name="intersect" fullname="CollideableObject::intersect" href="collideableobject.html#intersect" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="47" virtual="pure" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool intersect(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception) = 0">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="collide" fullname="CollideableObject::collide" href="collideableobject.html#collide" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="46" virtual="pure" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void collide(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception) = 0">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPosition" fullname="CollideableObject::newPosition" href="collideableobject.html#newPosition" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="43" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="CollideableObject::newPosition  samplePositition - The position for the sample object (works like a pivot point)  angle - The desired angle of incidence against the plane of the object  emissionDirection - The vector direction from the laser to the sample" signature="void newPosition(Eigen::Vector3d samplePositition, double angle, Eigen::Vector3d emissionDirection)">
                <parameter type="Eigen::Vector3d" name="samplePositition" default=""/>
                <parameter type="double" name="angle" default=""/>
                <parameter type="Eigen::Vector3d" name="emissionDirection" default=""/>
            </function>
            <function threadsafety="unspecified" name="setEnabled" fullname="CollideableObject::setEnabled" href="collideableobject.html#setEnabled" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="49" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="CollideableObject::setEnabled  state" signature="void setEnabled(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="setLocation" fullname="CollideableObject::setLocation" href="collideableobject.html#setLocation" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="39" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setLocation(const Eigen::Vector3d &amp;location)">
                <parameter type="const Eigen::Vector3d &amp;" name="location" default=""/>
            </function>
            <function threadsafety="unspecified" name="~CollideableObject" fullname="CollideableObject::~CollideableObject" href="collideableobject.html#dtor.CollideableObject" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="34" virtual="virtual" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="~CollideableObject()"/>
            <function threadsafety="unspecified" name="getLocation" fullname="CollideableObject::getLocation" href="collideableobject.html#getLocation" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="36" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const Eigen::Vector3d &amp;" signature="const Eigen::Vector3d &amp; getLocation() const"/>
            <function threadsafety="unspecified" name="getNormal" fullname="CollideableObject::getNormal" href="collideableobject.html#getNormal" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="37" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const Eigen::Vector3d &amp;" signature="const Eigen::Vector3d &amp; getNormal() const"/>
            <variable threadsafety="unspecified" name="Vector3d" fullname="CollideableObject::Vector3d" href="collideableobject.html#Vector3d-var" status="active" access="private" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="20" type="int" static="false"/>
            <variable threadsafety="unspecified" name="collisionsEnabled" fullname="CollideableObject::collisionsEnabled" href="collideableobject.html#collisionsEnabled-var" status="active" access="private" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="23" type="int" static="false"/>
            <variable threadsafety="unspecified" name="m_n0" fullname="CollideableObject::m_n0" href="collideableobject.html#m_n0-var" status="active" access="public" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="30" type="double" static="false"/>
            <variable threadsafety="unspecified" name="m_normal" fullname="CollideableObject::m_normal" href="collideableobject.html#m_normal-var" status="active" access="private" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="21" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="side" fullname="CollideableObject::side" href="collideableobject.html#side-var" status="active" access="private" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="22" type="int" static="false"/>
        </class>
        <typedef threadsafety="unspecified" name="Matrix4d" status="internal" access="private" location="collideableobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/collideableobject.h" lineno="11"/>
        <typedef threadsafety="unspecified" name="GraphMap" status="internal" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="16"/>
        <class threadsafety="unspecified" name="MOKELaserSim" href="mokelasersim.html" status="internal" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="46">
            <function threadsafety="unspecified" name="displayPolarVector" fullname="MOKELaserSim::displayPolarVector" href="mokelasersim.html#displayPolarVector" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="107" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::displayPolarVector  target - the Vector for the target angle of the polariser. This takes the target vector and display the normalised s and p values in the UI" signature="void displayPolarVector(Eigen::Vector2d &amp;target)">
                <parameter type="Eigen::Vector2d &amp;" name="target" default=""/>
            </function>
            <function threadsafety="unspecified" name="laserNoiseStateChanged" fullname="MOKELaserSim::laserNoiseStateChanged" href="mokelasersim.html#laserNoiseStateChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="111" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void laserNoiseStateChanged(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newCoersivity" fullname="MOKELaserSim::newCoersivity" href="mokelasersim.html#newCoersivity" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="117" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newCoersivity(double coersivity)">
                <parameter type="double" name="coersivity" default=""/>
            </function>
            <function threadsafety="unspecified" name="newHValue" fullname="MOKELaserSim::newHValue" href="mokelasersim.html#newHValue" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="115" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newHValue(double value)">
                <parameter type="double" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPEMNoiseState" fullname="MOKELaserSim::newPEMNoiseState" href="mokelasersim.html#newPEMNoiseState" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="114" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPEMNoiseState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPemState" fullname="MOKELaserSim::newPemState" href="mokelasersim.html#newPemState" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="112" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPemState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPolarisationTarget" fullname="MOKELaserSim::newPolarisationTarget" href="mokelasersim.html#newPolarisationTarget" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="116" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPolarisationTarget(Eigen::Vector2d target)">
                <parameter type="Eigen::Vector2d" name="target" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPolariserState" fullname="MOKELaserSim::newPolariserState" href="mokelasersim.html#newPolariserState" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="113" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPolariserState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_Analysier_view_clicked" fullname="MOKELaserSim::on_Analysier_view_clicked" href="mokelasersim.html#on_Analysier_view_clicked" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="76" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_Analysier_view_clicked Tell the 3D view to centre on the analyser" signature="void on_Analysier_view_clicked()"/>
            <function threadsafety="unspecified" name="on_H_slider_valueChanged" fullname="MOKELaserSim::on_H_slider_valueChanged" href="mokelasersim.html#on_H_slider_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="92" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_H_slider_valueChanged  value Set the new H value based on the slider" signature="void on_H_slider_valueChanged(int value)">
                <parameter type="int" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_PEM_view_clicked" fullname="MOKELaserSim::on_PEM_view_clicked" href="mokelasersim.html#on_PEM_view_clicked" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="74" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_PEM_view_clicked Tell the 3D view to cnetre on the PEM" signature="void on_PEM_view_clicked()"/>
            <function threadsafety="unspecified" name="on_StopSimButton_clicked" fullname="MOKELaserSim::on_StopSimButton_clicked" href="mokelasersim.html#on_StopSimButton_clicked" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="57" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_StopSimButton_clicked This This stops the timers and the simulation thread" signature="void on_StopSimButton_clicked()"/>
            <function threadsafety="unspecified" name="on_angle_of_incidence_valueChanged" fullname="MOKELaserSim::on_angle_of_incidence_valueChanged" href="mokelasersim.html#on_angle_of_incidence_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="60" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_angle_of_incidence_valueChanged  angle sends the new angle of incidence to the simulation thread" signature="void on_angle_of_incidence_valueChanged(int angle)">
                <parameter type="int" name="angle" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_centre_view_clicked" fullname="MOKELaserSim::on_centre_view_clicked" href="mokelasersim.html#on_centre_view_clicked" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="66" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_centre_view_clicked Tell the 3D view to reset the 3D view to the centre" signature="void on_centre_view_clicked()"/>
            <function threadsafety="unspecified" name="on_deviation_pem_valueChanged" fullname="MOKELaserSim::on_deviation_pem_valueChanged" href="mokelasersim.html#on_deviation_pem_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="86" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_deviation_pem_valueChanged  value Set the deviation for the PEM noise based on the position of the slider" signature="void on_deviation_pem_valueChanged(int value)">
                <parameter type="int" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_doubleSpinBox_valueChanged" fullname="MOKELaserSim::on_doubleSpinBox_valueChanged" href="mokelasersim.html#on_doubleSpinBox_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="96" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_doubleSpinBox_valueChanged  val Tell the hysteresis loop graph the new coersivity based on the slider" signature="void on_doubleSpinBox_valueChanged(double val)">
                <parameter type="double" name="val" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_laser_view_clicked" fullname="MOKELaserSim::on_laser_view_clicked" href="mokelasersim.html#on_laser_view_clicked" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="68" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_laser_view_clicked Tell the 3D view to centre on the laser" signature="void on_laser_view_clicked()"/>
            <function threadsafety="unspecified" name="on_mean_pem_valueChanged" fullname="MOKELaserSim::on_mean_pem_valueChanged" href="mokelasersim.html#on_mean_pem_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="88" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_mean_pem_valueChanged  value Set the mean of the noise for the PEM based on the position of the slider" signature="void on_mean_pem_valueChanged(int value)">
                <parameter type="int" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_noise_chk_stateChanged" fullname="MOKELaserSim::on_noise_chk_stateChanged" href="mokelasersim.html#on_noise_chk_stateChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="78" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_noise_chk_stateChanged  state Turn the noise on or off for the laser" signature="void on_noise_chk_stateChanged(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_pem_enabled_chk_stateChanged" fullname="MOKELaserSim::on_pem_enabled_chk_stateChanged" href="mokelasersim.html#on_pem_enabled_chk_stateChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="84" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_pem_enabled_chk_stateChanged  state Enable or disable the PEM" signature="void on_pem_enabled_chk_stateChanged(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_polar_direction_valueChanged" fullname="MOKELaserSim::on_polar_direction_valueChanged" href="mokelasersim.html#on_polar_direction_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="94" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_polar_direction_valueChanged  value - the value of the dial For this we first need to convert the int value from the dial to an angle. The value at the top centre of the dial is 0 degrees (visually but not in reality, in reality the 0 angle position is down). The initial conversion is easy and is displayed on the ui at the top of this method" signature="void on_polar_direction_valueChanged(int value)">
                <parameter type="int" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_polar_enabled_chk_stateChanged" fullname="MOKELaserSim::on_polar_enabled_chk_stateChanged" href="mokelasersim.html#on_polar_enabled_chk_stateChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="90" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_polar_enabled_chk_stateChanged  state Enable or disable the Polariser" signature="void on_polar_enabled_chk_stateChanged(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_polariserDisplayEnable_chk_stateChanged" fullname="MOKELaserSim::on_polariserDisplayEnable_chk_stateChanged" href="mokelasersim.html#on_polariserDisplayEnable_chk_stateChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="82" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_polariserEnable_chk_stateChanged  state Enable or disable the polariser diagram drawing" signature="void on_polariserDisplayEnable_chk_stateChanged(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_polariser_view_clicked" fullname="MOKELaserSim::on_polariser_view_clicked" href="mokelasersim.html#on_polariser_view_clicked" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="70" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_polariser_view_clicked Tell the 3D view to centre on the polarising filter" signature="void on_polariser_view_clicked()"/>
            <function threadsafety="unspecified" name="on_sample_deviation_valueChanged" fullname="MOKELaserSim::on_sample_deviation_valueChanged" href="mokelasersim.html#on_sample_deviation_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="64" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_sample_deviation_valueChanged  value Set the deviation of the noise for the laser based on the slider position" signature="void on_sample_deviation_valueChanged(int value)">
                <parameter type="int" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_sample_mean_valueChanged" fullname="MOKELaserSim::on_sample_mean_valueChanged" href="mokelasersim.html#on_sample_mean_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="62" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_sample_mean_valueChanged  value Set the mean for the noise of the laser based from the slider position" signature="void on_sample_mean_valueChanged(int value)">
                <parameter type="int" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_sample_view_clicked" fullname="MOKELaserSim::on_sample_view_clicked" href="mokelasersim.html#on_sample_view_clicked" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="72" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_sample_view_clicked Tell the 3D view to centre on the sample" signature="void on_sample_view_clicked()"/>
            <function threadsafety="unspecified" name="on_speedSlider_valueChanged" fullname="MOKELaserSim::on_speedSlider_valueChanged" href="mokelasersim.html#on_speedSlider_valueChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="59" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_speedSlider_valueChanged  value - the value from the slider This multiplies the base values for the time in ms to wait until triggering the time for the PEM and the emission of the next ray by the value of the sider. slowing down the simulation, but not adjusting the times in which the ray will collide with the PEM" signature="void on_speedSlider_valueChanged(int value)">
                <parameter type="int" name="value" default=""/>
            </function>
            <function threadsafety="unspecified" name="on_threeDEnable_chk_stateChanged" fullname="MOKELaserSim::on_threeDEnable_chk_stateChanged" href="mokelasersim.html#on_threeDEnable_chk_stateChanged" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="80" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="MOKELaserSim::on_threeDEnable_chk_stateChanged  state Enable or disable the 3D view" signature="void on_threeDEnable_chk_stateChanged(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="stopSim" fullname="MOKELaserSim::stopSim" href="mokelasersim.html#stopSim" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="53" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void stopSim()"/>
            <function threadsafety="unspecified" name="~MOKELaserSim" fullname="MOKELaserSim::~MOKELaserSim" href="mokelasersim.html#dtor.MOKELaserSim" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="51" virtual="non" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="MOKELaserSim::~MOKELaserSim clear memory on class delete" signature="~MOKELaserSim()"/>
            <variable threadsafety="unspecified" name="eventLoopTimer" fullname="MOKELaserSim::eventLoopTimer" href="mokelasersim.html#eventLoopTimer-var" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="102" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="pemTimer" fullname="MOKELaserSim::pemTimer" href="mokelasersim.html#pemTimer-var" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="103" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="randomGenerator_laser" fullname="MOKELaserSim::randomGenerator_laser" href="mokelasersim.html#randomGenerator_laser-var" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="104" type="RandomNoiseCalculator *" static="false"/>
            <variable threadsafety="unspecified" name="randomGenerator_pem" fullname="MOKELaserSim::randomGenerator_pem" href="mokelasersim.html#randomGenerator_pem-var" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="105" type="RandomNoiseCalculator *" static="false"/>
            <variable threadsafety="unspecified" name="resultsWindow" fullname="MOKELaserSim::resultsWindow" href="mokelasersim.html#resultsWindow-var" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="100" type="PolarisationWindow *" static="false"/>
            <variable threadsafety="unspecified" name="simThread" fullname="MOKELaserSim::simThread" href="mokelasersim.html#simThread-var" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="101" type="SimulationThread" static="false"/>
            <variable threadsafety="unspecified" name="ui" fullname="MOKELaserSim::ui" href="mokelasersim.html#ui-var" status="active" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="99" type="Ui::MOKELaserSim *" static="false"/>
        </class>
        <enum threadsafety="unspecified" name="ObjectType" status="internal" access="private" location="objecttype.h" filepath="/Users/Bill/Documents/uni/COMP30040/objecttype.h" lineno="7">
            <value name="centre" value="0"/>
            <value name="sample" value="1"/>
            <value name="pem" value="2"/>
            <value name="polarFilter" value="3"/>
            <value name="analyser" value="4"/>
            <value name="laser" value="5"/>
            <value name="notAnObject" value="6"/>
        </enum>
        <class threadsafety="unspecified" name="PEM" href="pem.html" status="internal" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="16" bases="CollideableObject">
            <function threadsafety="unspecified" name="getPolarizationMatrix" fullname="PEM::getPolarizationMatrix" href="pem.html#getPolarizationMatrix" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="45" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Matrix22cd" signature="Matrix22cd getPolarizationMatrix()"/>
            <function threadsafety="unspecified" name="getType" fullname="PEM::getType" href="pem.html#getType" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="37" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="ObjectType" brief="PEM::getType  1 - which denotes a PEM" signature="ObjectType getType() override"/>
            <function threadsafety="unspecified" name="PEM" fullname="PEM::PEM" href="pem.html#PEM" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="32" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="PEM::PEM  location  side  normal  radius  phaseAmplitude  angularFrequency" signature="PEM(Eigen::Vector3d location, int side, Eigen::Vector3d normal, double radius)">
                <parameter type="Eigen::Vector3d" name="location" default=""/>
                <parameter type="int" name="side" default=""/>
                <parameter type="Eigen::Vector3d" name="normal" default=""/>
                <parameter type="double" name="radius" default=""/>
            </function>
            <function threadsafety="unspecified" name="intersect" fullname="PEM::intersect" href="pem.html#intersect" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="40" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="bool" brief="PEM::intersect  ray  pointOfInterception  true if an intersection is detected else false" signature="bool intersect(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception) override">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="calculatePolarisationMatrix" fullname="PEM::calculatePolarisationMatrix" href="pem.html#calculatePolarisationMatrix" status="active" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="29" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PEM::calculatePolarisationMatrix" signature="void calculatePolarisationMatrix()"/>
            <function threadsafety="unspecified" name="collide" fullname="PEM::collide" href="pem.html#collide" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="39" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="void" signature="void collide(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception) override">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="incrementTime" fullname="PEM::incrementTime" href="pem.html#incrementTime" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="41" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PEM::incrementTime This is called whent the PEM timer triggers it. Increment the time value in the object" signature="void incrementTime()"/>
            <function threadsafety="unspecified" name="newNoise" fullname="PEM::newNoise" href="pem.html#newNoise" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="44" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newNoise(int d, int gen)">
                <parameter type="int" name="d" default=""/>
                <parameter type="int" name="gen" default=""/>
            </function>
            <function threadsafety="unspecified" name="setNoiseState" fullname="PEM::setNoiseState" href="pem.html#setNoiseState" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="43" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PEM::setNoiseState  state" signature="void setNoiseState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="~PEM" fullname="PEM::~PEM" href="pem.html#dtor.PEM" status="active" access="public" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="36" virtual="virtual" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="" signature="~PEM() override"/>
            <variable threadsafety="unspecified" name="Er" fullname="PEM::Er" href="pem.html#Er-var" status="active" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="27" type="Eigen::Vector2cd" static="false"/>
            <variable threadsafety="unspecified" name="dist" fullname="PEM::dist" href="pem.html#dist-var" status="active" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="25" type="int" static="false"/>
            <variable threadsafety="unspecified" name="m_radius" fullname="PEM::m_radius" href="pem.html#m_radius-var" status="active" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="22" type="double" static="false"/>
            <variable threadsafety="unspecified" name="noiseState" fullname="PEM::noiseState" href="pem.html#noiseState-var" status="active" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="24" type="int" static="false"/>
            <variable threadsafety="unspecified" name="noise_gen" fullname="PEM::noise_gen" href="pem.html#noise_gen-var" status="active" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="26" type="int" static="false"/>
            <variable threadsafety="unspecified" name="time" fullname="PEM::time" href="pem.html#time-var" status="active" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="22" type="double" static="false"/>
        </class>
        <class threadsafety="unspecified" name="PolarisationWindow" href="polarisationwindow.html" status="internal" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="24">
            <function threadsafety="unspecified" name="drawAxis" fullname="PolarisationWindow::drawAxis" href="polarisationwindow.html#drawAxis" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="45" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisationWindow::drawAxis  painter" signature="void drawAxis(int *painter)">
                <parameter type="int *" name="painter" default=""/>
            </function>
            <function threadsafety="unspecified" name="drawPolarosations" fullname="PolarisationWindow::drawPolarosations" href="polarisationwindow.html#drawPolarosations" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="46" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisationWindow::drawPolarosations  painter" signature="void drawPolarosations(int *painter)">
                <parameter type="int *" name="painter" default=""/>
            </function>
            <function threadsafety="unspecified" name="render" fullname="PolarisationWindow::render" href="polarisationwindow.html#render" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="43" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisationWindow::render  visualisation - The image we are rendering the diagram into" signature="void render(int &amp;visualisation)">
                <parameter type="int &amp;" name="visualisation" default=""/>
            </function>
            <function threadsafety="unspecified" name="renderNow" fullname="PolarisationWindow::renderNow" href="polarisationwindow.html#renderNow" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="44" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisationWindow::renderNow" signature="void renderNow()"/>
            <function threadsafety="unspecified" name="setEnabledState" fullname="PolarisationWindow::setEnabledState" href="polarisationwindow.html#setEnabledState" status="active" access="public" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="32" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisationWindow::setEnabledState  state" signature="void setEnabledState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="~PolarisationWindow" fullname="PolarisationWindow::~PolarisationWindow" href="polarisationwindow.html#dtor.PolarisationWindow" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="28" virtual="virtual" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="~PolarisationWindow()"/>
            <variable threadsafety="unspecified" name="enabled" fullname="PolarisationWindow::enabled" href="polarisationwindow.html#enabled-var" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="35" type="int" static="false"/>
            <variable threadsafety="unspecified" name="height" fullname="PolarisationWindow::height" href="polarisationwindow.html#height-var" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="40" type="int" static="false"/>
            <variable threadsafety="unspecified" name="m_view" fullname="PolarisationWindow::m_view" href="polarisationwindow.html#m_view-var" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="41" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="outputImage" fullname="PolarisationWindow::outputImage" href="polarisationwindow.html#outputImage-var" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="37" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="polarisations" fullname="PolarisationWindow::polarisations" href="polarisationwindow.html#polarisations-var" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="36" type="int" static="false"/>
            <variable threadsafety="unspecified" name="scene" fullname="PolarisationWindow::scene" href="polarisationwindow.html#scene-var" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="38" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="width" fullname="PolarisationWindow::width" href="polarisationwindow.html#width-var" status="active" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="39" type="int" static="false"/>
        </class>
        <class threadsafety="unspecified" name="Ray" href="ray.html" status="internal" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="16">
            <function threadsafety="unspecified" name="getDirection" fullname="Ray::getDirection" href="ray.html#getDirection" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="30" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Eigen::Vector3d" brief="Ray::getDirection  The direction of the ray" signature="Eigen::Vector3d getDirection()"/>
            <function threadsafety="unspecified" name="getOrigin" fullname="Ray::getOrigin" href="ray.html#getOrigin" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="29" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Eigen::Vector3d" brief="Ray::getOrigin  the origin of the ray" signature="Eigen::Vector3d getOrigin()"/>
            <function threadsafety="unspecified" name="getCalculationMatrix" fullname="Ray::getCalculationMatrix" href="ray.html#getCalculationMatrix" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="32" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Matrix4cd" brief="Ray::getCalculationMatrix  The current product of all the Jones Calculus applied to the ray" signature="Matrix4cd getCalculationMatrix()"/>
            <function threadsafety="unspecified" name="getPolarisation" fullname="Ray::getPolarisation" href="ray.html#getPolarisation" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="31" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Matrix4cd" brief="Ray::getPolarisation  The polarisation of the ray" signature="Matrix4cd getPolarisation()"/>
            <function threadsafety="unspecified" name="Ray" fullname="Ray::Ray" href="ray.html#Ray" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="24" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="Ray::Ray  origin  direction  polarisation  targetPolarisation The constructor for the ray, we need a direction, origin and polarisation. Because the concept of the laser does not exist in this sim, the constructor of the ray is the laser, for that reason we need to have a target polarisation for it too. The is generates the martix for use in the Jones Calculus formula" signature="Ray(Eigen::Vector3d origin, Eigen::Vector3d direction, Matrix4cd polarisation, Eigen::Vector2d targetPolarisation)">
                <parameter type="Eigen::Vector3d" name="origin" default=""/>
                <parameter type="Eigen::Vector3d" name="direction" default=""/>
                <parameter type="Matrix4cd" name="polarisation" default=""/>
                <parameter type="Eigen::Vector2d" name="targetPolarisation" default=""/>
            </function>
            <function threadsafety="unspecified" name="getWaveLength" fullname="Ray::getWaveLength" href="ray.html#getWaveLength" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="33" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="double" signature="double getWaveLength()"/>
            <function threadsafety="unspecified" name="calculationMatrixMultiplication" fullname="Ray::calculationMatrixMultiplication" href="ray.html#calculationMatrixMultiplication" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="39" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="Ray::calculationMatrixMultiplication  x - the next matrix to be applied to the ray This performs the calculation of the running product for Jones Calculus" signature="void calculationMatrixMultiplication(Matrix4cd &amp;x)">
                <parameter type="Matrix4cd &amp;" name="x" default=""/>
            </function>
            <function threadsafety="unspecified" name="flipPolarization" fullname="Ray::flipPolarization" href="ray.html#flipPolarization" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="41" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void flipPolarization()"/>
            <function threadsafety="unspecified" name="setDirection" fullname="Ray::setDirection" href="ray.html#setDirection" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="36" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="Ray::setDirection  direction" signature="void setDirection(Eigen::Vector3d direction)">
                <parameter type="Eigen::Vector3d" name="direction" default=""/>
            </function>
            <function threadsafety="unspecified" name="setOrigin" fullname="Ray::setOrigin" href="ray.html#setOrigin" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="35" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="Ray::setOrigin  origin" signature="void setOrigin(Eigen::Vector3d origin)">
                <parameter type="Eigen::Vector3d" name="origin" default=""/>
            </function>
            <function threadsafety="unspecified" name="setPolarisation" fullname="Ray::setPolarisation" href="ray.html#setPolarisation" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="37" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="Ray::setPolarisation  polarisation" signature="void setPolarisation(Matrix4cd polarisation)">
                <parameter type="Matrix4cd" name="polarisation" default=""/>
            </function>
            <function threadsafety="unspecified" name="~Ray" fullname="Ray::~Ray" href="ray.html#dtor.Ray" status="active" access="public" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="27" virtual="non" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="Ray:~Ray() * The default destructor, no need to" signature="~Ray()"/>
            <variable threadsafety="unspecified" name="m_calculationMatrix" fullname="Ray::m_calculationMatrix" href="ray.html#m_calculationMatrix-var" status="active" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="20" type="Matrix4cd" static="false"/>
            <variable threadsafety="unspecified" name="m_direction" fullname="Ray::m_direction" href="ray.html#m_direction-var" status="active" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="18" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="m_origin" fullname="Ray::m_origin" href="ray.html#m_origin-var" status="active" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="17" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="m_polarisation" fullname="Ray::m_polarisation" href="ray.html#m_polarisation-var" status="active" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="19" type="Matrix4cd" static="false"/>
            <variable threadsafety="unspecified" name="m_targetPolarisation" fullname="Ray::m_targetPolarisation" href="ray.html#m_targetPolarisation-var" status="active" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="21" type="Eigen::Vector2d" static="false"/>
        </class>
        <class threadsafety="unspecified" name="kerrRotationGraph" href="kerrrotationgraph.html" status="internal" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="24">
            <function threadsafety="unspecified" name="addMapToSeries" fullname="kerrRotationGraph::addMapToSeries" href="kerrrotationgraph.html#addMapToSeries" status="active" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="35" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="KerrRotationGraph::addMapToSeries This takes the graph map object and adds them to two QT series objects to be shown in the chart. It also sets the names for the series, then calls showChart()" signature="void addMapToSeries()"/>
            <function threadsafety="unspecified" name="showChart" fullname="kerrRotationGraph::showChart" href="kerrrotationgraph.html#showChart" status="active" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="36" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="KerrRotationGraph::showChart This adds the series to the axis on the chart and shows it" signature="void showChart()"/>
            <variable threadsafety="unspecified" name="m_chart" fullname="kerrRotationGraph::m_chart" href="kerrrotationgraph.html#m_chart-var" status="active" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="33" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="m_graphMap" fullname="kerrRotationGraph::m_graphMap" href="kerrrotationgraph.html#m_graphMap-var" status="active" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="32" type="GraphMap" static="false"/>
            <variable threadsafety="unspecified" name="m_series_p" fullname="kerrRotationGraph::m_series_p" href="kerrrotationgraph.html#m_series_p-var" status="active" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="30" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="m_series_s" fullname="kerrRotationGraph::m_series_s" href="kerrrotationgraph.html#m_series_s-var" status="active" access="private" location="kerrrotationgraph.h" filepath="/Users/Bill/Documents/uni/COMP30040/kerrrotationgraph.h" lineno="31" type="int *" static="false"/>
        </class>
        <typedef threadsafety="unspecified" name="Matrix22cd" status="internal" access="private" location="pem.h" filepath="/Users/Bill/Documents/uni/COMP30040/pem.h" lineno="9"/>
        <variable threadsafety="unspecified" name="degreeMulitplier" status="internal" access="private" location="polarisationwindow.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisationwindow.h" lineno="17" type="const float" static="false"/>
        <class threadsafety="unspecified" name="PolarisingFilter" href="polarisingfilter.html" status="internal" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="13" bases="CollideableObject">
            <function threadsafety="unspecified" name="getType" fullname="PolarisingFilter::getType" href="polarisingfilter.html#getType" status="active" access="public" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="33" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="ObjectType" brief="PolarisingFilter::getType  2 - meaning polarising filter" signature="ObjectType getType()"/>
            <function threadsafety="unspecified" name="PolarisingFilter" fullname="PolarisingFilter::PolarisingFilter" href="polarisingfilter.html#PolarisingFilter" status="active" access="public" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="25" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="PolarisingFilter::PolarisingFilter  location  side  normal  radius  n1  targetPolarisation" signature="PolarisingFilter(Eigen::Vector3d location, int side, Eigen::Vector3d normal, double radius)">
                <parameter type="Eigen::Vector3d" name="location" default=""/>
                <parameter type="int" name="side" default=""/>
                <parameter type="Eigen::Vector3d" name="normal" default=""/>
                <parameter type="double" name="radius" default=""/>
            </function>
            <function threadsafety="unspecified" name="intersect" fullname="PolarisingFilter::intersect" href="polarisingfilter.html#intersect" status="active" access="public" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="32" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" brief="PolarisingFilter::intersect  ray  pointOfInterception  if there was a collision with the filter and this ray" signature="bool intersect(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception)">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="getPolarisationMatrix" fullname="PolarisingFilter::getPolarisationMatrix" href="polarisingfilter.html#getPolarisationMatrix" status="active" access="public" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="35" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" brief="PolarisingFilter::getPolarisationMatrix  The polarisation matrix at the time of calling" signature="int getPolarisationMatrix()"/>
            <function threadsafety="unspecified" name="calculateAngleOfInterception" fullname="PolarisingFilter::calculateAngleOfInterception" href="polarisingfilter.html#calculateAngleOfInterception" status="active" access="protected" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="47" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void calculateAngleOfInterception(Ray &amp;ray)">
                <parameter type="Ray &amp;" name="ray" default=""/>
            </function>
            <function threadsafety="unspecified" name="calculateAngleOfRefraction" fullname="PolarisingFilter::calculateAngleOfRefraction" href="polarisingfilter.html#calculateAngleOfRefraction" status="active" access="protected" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="41" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void calculateAngleOfRefraction()"/>
            <function threadsafety="unspecified" name="calculatePolarisationMatrix" fullname="PolarisingFilter::calculatePolarisationMatrix" href="polarisingfilter.html#calculatePolarisationMatrix" status="active" access="protected" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="39" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisingFilter::calculatePolarisationMatrix This generates the matrix for use in the Jones Calculus for this we need the angle at which the polariser is targeting. We use trigonometry to calcluate this. Then the matrix is populated" signature="void calculatePolarisationMatrix()"/>
            <function threadsafety="unspecified" name="collide" fullname="PolarisingFilter::collide" href="polarisingfilter.html#collide" status="active" access="public" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="31" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisingFilter::collide  ray  pointOfInterception" signature="void collide(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception)">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="outputEr" fullname="PolarisingFilter::outputEr" href="polarisingfilter.html#outputEr" status="active" access="protected" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="59" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void outputEr(Eigen::Vector2cd Er)">
                <parameter type="Eigen::Vector2cd" name="Er" default=""/>
            </function>
            <function threadsafety="unspecified" name="setTarget" fullname="PolarisingFilter::setTarget" href="polarisingfilter.html#setTarget" status="active" access="public" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="36" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="PolarisingFilter::setTarget  target Called when the dial on the UI is changed. Sets the target angle which will adjust the matrix for use in the Jones Calculus" signature="void setTarget(Eigen::Vector2d target)">
                <parameter type="Eigen::Vector2d" name="target" default=""/>
            </function>
            <function threadsafety="unspecified" name="~PolarisingFilter" fullname="PolarisingFilter::~PolarisingFilter" href="polarisingfilter.html#dtor.PolarisingFilter" status="active" access="public" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="29" virtual="virtual" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="~PolarisingFilter()"/>
            <variable threadsafety="unspecified" name="Er" fullname="PolarisingFilter::Er" href="polarisingfilter.html#Er-var" status="active" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="17" type="Eigen::Vector2cd" static="false"/>
            <variable threadsafety="unspecified" name="Matrix22d" fullname="PolarisingFilter::Matrix22d" href="polarisingfilter.html#Matrix22d-var" status="active" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="15" type="int" static="false"/>
            <variable threadsafety="unspecified" name="dist" fullname="PolarisingFilter::dist" href="polarisingfilter.html#dist-var" status="active" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="20" type="int" static="false"/>
            <variable threadsafety="unspecified" name="m_radius" fullname="PolarisingFilter::m_radius" href="polarisingfilter.html#m_radius-var" status="active" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="18" type="double" static="false"/>
            <variable threadsafety="unspecified" name="m_targetPolarisation" fullname="PolarisingFilter::m_targetPolarisation" href="polarisingfilter.html#m_targetPolarisation-var" status="active" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="16" type="Eigen::Vector2d" static="false"/>
            <variable threadsafety="unspecified" name="noiseState" fullname="PolarisingFilter::noiseState" href="polarisingfilter.html#noiseState-var" status="active" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="22" type="int" static="false"/>
            <variable threadsafety="unspecified" name="noise_gen" fullname="PolarisingFilter::noise_gen" href="polarisingfilter.html#noise_gen-var" status="active" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="21" type="int" static="false"/>
        </class>
        <typedef threadsafety="unspecified" name="Matrix22d" status="internal" access="private" location="polarisingfilter.h" filepath="/Users/Bill/Documents/uni/COMP30040/polarisingfilter.h" lineno="7"/>
        <class threadsafety="unspecified" name="RandomNoiseCalculator" href="randomnoisecalculator.html" status="internal" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="12">
            <function threadsafety="unspecified" name="generate" fullname="RandomNoiseCalculator::generate" href="randomnoisecalculator.html#generate" status="active" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="18" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="RandomNoiseCalculator::generate This is called whenever the mean or the deviation is changed and emits to the object it is tied to the new generator and distrobution" signature="void generate()"/>
            <function threadsafety="unspecified" name="setDeviation" fullname="RandomNoiseCalculator::setDeviation" href="randomnoisecalculator.html#setDeviation" status="active" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="20" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="RandomNoiseCalculator::setMean  mean On change of the deviation in the UI the random is updated and generate is called" signature="void setDeviation(double dev)">
                <parameter type="double" name="dev" default=""/>
            </function>
            <function threadsafety="unspecified" name="setMean" fullname="RandomNoiseCalculator::setMean" href="randomnoisecalculator.html#setMean" status="active" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="19" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="RandomNoiseCalculator::setMean  mean On change of the mean in the UI the random is updated and generate is called" signature="void setMean(double mean)">
                <parameter type="double" name="mean" default=""/>
            </function>
            <variable threadsafety="unspecified" name="gen" fullname="RandomNoiseCalculator::gen" href="randomnoisecalculator.html#gen-var" status="active" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="28" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="m_dev" fullname="RandomNoiseCalculator::m_dev" href="randomnoisecalculator.html#m_dev-var" status="active" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="26" type="double" static="false"/>
            <variable threadsafety="unspecified" name="m_mean" fullname="RandomNoiseCalculator::m_mean" href="randomnoisecalculator.html#m_mean-var" status="active" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="26" type="double" static="false"/>
            <variable threadsafety="unspecified" name="rd" fullname="RandomNoiseCalculator::rd" href="randomnoisecalculator.html#rd-var" status="active" access="private" location="randomnoisecalculator.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisecalculator.h" lineno="27" type="int" static="false"/>
        </class>
        <class threadsafety="unspecified" name="RandomNoiseChartView" href="randomnoisechartview.html" status="internal" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="27">
            <function threadsafety="unspecified" name="RandomNoiseChartView" fullname="RandomNoiseChartView::RandomNoiseChartView" href="randomnoisechartview.html#RandomNoiseChartView" status="active" access="public" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="42" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="RandomNoiseChartView(int *parent, const int &amp;name)">
                <parameter type="int *" name="parent" default="nullptr"/>
                <parameter type="const int &amp;" name="name" default=""/>
            </function>
            <function threadsafety="unspecified" name="populateChart" fullname="RandomNoiseChartView::populateChart" href="randomnoisechartview.html#populateChart" status="active" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="36" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="RandomNoiseChartView::populateChart This adds the default curve into the bar chart, the overloaded method will add useful points into it" signature="void populateChart()"/>
            <function threadsafety="unspecified" name="populateChart" fullname="RandomNoiseChartView::populateChart" href="randomnoisechartview.html#populateChart-1" status="active" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="37" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void populateChart(int d, int gen)">
                <parameter type="int" name="d" default=""/>
                <parameter type="int" name="gen" default=""/>
            </function>
            <function threadsafety="unspecified" name="render" fullname="RandomNoiseChartView::render" href="randomnoisechartview.html#render" status="active" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="39" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void render()"/>
            <variable threadsafety="unspecified" name="m_chart" fullname="RandomNoiseChartView::m_chart" href="randomnoisechartview.html#m_chart-var" status="active" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="33" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="m_chartTitle" fullname="RandomNoiseChartView::m_chartTitle" href="randomnoisechartview.html#m_chartTitle-var" status="active" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="34" type="int" static="false"/>
            <variable threadsafety="unspecified" name="m_lineSeries" fullname="RandomNoiseChartView::m_lineSeries" href="randomnoisechartview.html#m_lineSeries-var" status="active" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="32" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="m_points" fullname="RandomNoiseChartView::m_points" href="randomnoisechartview.html#m_points-var" status="active" access="private" location="randomnoisechartview.h" filepath="/Users/Bill/Documents/uni/COMP30040/randomnoisechartview.h" lineno="31" type="int *" static="false"/>
        </class>
        <typedef threadsafety="unspecified" name="Matrix4cd" status="internal" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="10"/>
        <typedef threadsafety="unspecified" name="Vector2cd" status="internal" access="private" location="ray.h" filepath="/Users/Bill/Documents/uni/COMP30040/ray.h" lineno="7"/>
        <class threadsafety="unspecified" name="SampleObject" href="sampleobject.html" status="internal" access="private" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="17" bases="CollideableObject">
            <function threadsafety="unspecified" name="getType" fullname="SampleObject::getType" href="sampleobject.html#getType" status="active" access="public" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="41" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="ObjectType" brief="SampleObject::getType  3 as this denotes the type of the Sample" signature="ObjectType getType()"/>
            <function threadsafety="unspecified" name="SampleObject" fullname="SampleObject::SampleObject" href="sampleobject.html#SampleObject" status="active" access="public" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="34" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="SampleObject::SampleObject  location  side  normal  radius  n1  q The constructor for the sample object" signature="SampleObject(Eigen::Vector3d location, int side, Eigen::Vector3d normal, double radius)">
                <parameter type="Eigen::Vector3d" name="location" default=""/>
                <parameter type="int" name="side" default=""/>
                <parameter type="Eigen::Vector3d" name="normal" default=""/>
                <parameter type="double" name="radius" default=""/>
            </function>
            <function threadsafety="unspecified" name="intersect" fullname="SampleObject::intersect" href="sampleobject.html#intersect" status="active" access="public" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="40" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" brief="SampleObject::intersect  ray  pointOfInterception  true if a collision is detected" signature="bool intersect(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception)">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="calculateAngleOfInterception" fullname="SampleObject::calculateAngleOfInterception" href="sampleobject.html#calculateAngleOfInterception" status="active" access="protected" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="92" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void calculateAngleOfInterception(Ray &amp;ray)">
                <parameter type="Ray &amp;" name="ray" default=""/>
            </function>
            <function threadsafety="unspecified" name="calculateAngleOfRefraction" fullname="SampleObject::calculateAngleOfRefraction" href="sampleobject.html#calculateAngleOfRefraction" status="active" access="protected" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="78" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void calculateAngleOfRefraction()"/>
            <function threadsafety="unspecified" name="calculatePolarisationUsingJonesCalculus" fullname="SampleObject::calculatePolarisationUsingJonesCalculus" href="sampleobject.html#calculatePolarisationUsingJonesCalculus" status="active" access="public" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="42" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="SampleObject::calculatePolarisationUsingGriggsFormulae  ray  theta0  theta1 This generates the matrix for the Jones calculus model and updates the polarisation of the Ray. The maths for this can be found in my report" signature="void calculatePolarisationUsingJonesCalculus(Ray &amp;ray)">
                <parameter type="Ray &amp;" name="ray" default=""/>
            </function>
            <function threadsafety="unspecified" name="collide" fullname="SampleObject::collide" href="sampleobject.html#collide" status="active" access="public" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="39" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="SampleObject::collide  ray  pointOfInterception" signature="void collide(Ray &amp;ray, Eigen::Vector3d &amp;pointOfInterception)">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="Eigen::Vector3d &amp;" name="pointOfInterception" default=""/>
            </function>
            <function threadsafety="unspecified" name="insertIntoGraphMap" fullname="SampleObject::insertIntoGraphMap" href="sampleobject.html#insertIntoGraphMap" status="active" access="private" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="54" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void insertIntoGraphMap()"/>
            <function threadsafety="unspecified" name="newAngleOutout" fullname="SampleObject::newAngleOutout" href="sampleobject.html#newAngleOutout" status="active" access="protected" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="106" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newAngleOutout(GraphMap graphMap)">
                <parameter type="GraphMap" name="graphMap" default=""/>
            </function>
            <function threadsafety="unspecified" name="newThetas" fullname="SampleObject::newThetas" href="sampleobject.html#newThetas" status="active" access="protected" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="107" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newThetas()"/>
            <function threadsafety="unspecified" name="outputDirectionUpdated" fullname="SampleObject::outputDirectionUpdated" href="sampleobject.html#outputDirectionUpdated" status="active" access="protected" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="105" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void outputDirectionUpdated(Eigen::Vector3d direction)">
                <parameter type="Eigen::Vector3d" name="direction" default=""/>
            </function>
            <function threadsafety="unspecified" name="setM_Y" fullname="SampleObject::setM_Y" href="sampleobject.html#setM_Y" status="active" access="public" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="45" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="SampleObject::setM_Y  m_y" signature="void setM_Y(double h)">
                <parameter type="double" name="h" default=""/>
            </function>
            <function threadsafety="unspecified" name="~SampleObject" fullname="SampleObject::~SampleObject" href="sampleobject.html#dtor.SampleObject" status="active" access="public" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="37" virtual="virtual" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="SampleObject:~SampleObject() * The default destructor" signature="~SampleObject()"/>
            <variable threadsafety="unspecified" name="m_R" fullname="SampleObject::m_R" href="sampleobject.html#m_R-var" status="active" access="private" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="30" type="Matrix4d" static="false"/>
            <variable threadsafety="unspecified" name="m_graphMap" fullname="SampleObject::m_graphMap" href="sampleobject.html#m_graphMap-var" status="active" access="private" location="sampleobject.h" filepath="/Users/Bill/Documents/uni/COMP30040/sampleobject.h" lineno="31" type="GraphMap" static="false"/>
        </class>
        <class threadsafety="unspecified" name="SimulationThread" href="simulationthread.html" status="internal" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="33">
            <function threadsafety="unspecified" name="generateInitalPolarisation" fullname="SimulationThread::generateInitalPolarisation" href="simulationthread.html#generateInitalPolarisation" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="87" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Matrix4cd" signature="Matrix4cd generateInitalPolarisation()"/>
            <function threadsafety="unspecified" name="setupPEM" fullname="SimulationThread::setupPEM" href="simulationthread.html#setupPEM" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="85" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="PEM *" signature="PEM * setupPEM()"/>
            <function threadsafety="unspecified" name="setupPolariser" fullname="SimulationThread::setupPolariser" href="simulationthread.html#setupPolariser" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="82" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="PolarisingFilter *" signature="PolarisingFilter * setupPolariser(Eigen::Vector2d targetPolarisation, ThreeDimentionalVisualisation &amp;rep, Loop_graph &amp;loop_graph)">
                <parameter type="Eigen::Vector2d" name="targetPolarisation" default=""/>
                <parameter type="ThreeDimentionalVisualisation &amp;" name="rep" default=""/>
                <parameter type="Loop_graph &amp;" name="loop_graph" default=""/>
            </function>
            <function threadsafety="unspecified" name="setupSample" fullname="SimulationThread::setupSample" href="simulationthread.html#setupSample" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="79" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="SampleObject *" signature="SampleObject * setupSample()"/>
            <function threadsafety="unspecified" name="angleOfIncidenceChanged" fullname="SimulationThread::angleOfIncidenceChanged" href="simulationthread.html#angleOfIncidenceChanged" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="49" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void angleOfIncidenceChanged(double angle)">
                <parameter type="double" name="angle" default=""/>
            </function>
            <function threadsafety="unspecified" name="castRay" fullname="SimulationThread::castRay" href="simulationthread.html#castRay" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="91" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void castRay(Ray &amp;ray, int &amp;objectsInScene, int &amp;depth)">
                <parameter type="Ray &amp;" name="ray" default=""/>
                <parameter type="int &amp;" name="objectsInScene" default=""/>
                <parameter type="int &amp;" name="depth" default=""/>
            </function>
            <function threadsafety="unspecified" name="emittedNewRayFromAnalyiser" fullname="SimulationThread::emittedNewRayFromAnalyiser" href="simulationthread.html#emittedNewRayFromAnalyiser" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="96" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void emittedNewRayFromAnalyiser(Matrix4cd polarisation)">
                <parameter type="Matrix4cd" name="polarisation" default=""/>
            </function>
            <function threadsafety="unspecified" name="emittedNewRayFromLaser" fullname="SimulationThread::emittedNewRayFromLaser" href="simulationthread.html#emittedNewRayFromLaser" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="97" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void emittedNewRayFromLaser(Ray ray)">
                <parameter type="Ray" name="ray" default=""/>
            </function>
            <function threadsafety="unspecified" name="fireNextRay" fullname="SimulationThread::fireNextRay" href="simulationthread.html#fireNextRay" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="48" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void fireNextRay()"/>
            <function threadsafety="unspecified" name="newHValue" fullname="SimulationThread::newHValue" href="simulationthread.html#newHValue" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="56" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newHValue(double my)">
                <parameter type="double" name="my" default=""/>
            </function>
            <function threadsafety="unspecified" name="newLaserNoise" fullname="SimulationThread::newLaserNoise" href="simulationthread.html#newLaserNoise" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="50" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newLaserNoise(int d, int gen)">
                <parameter type="int" name="d" default=""/>
                <parameter type="int" name="gen" default=""/>
            </function>
            <function threadsafety="unspecified" name="newLaserNoiseState" fullname="SimulationThread::newLaserNoiseState" href="simulationthread.html#newLaserNoiseState" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="51" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newLaserNoiseState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPemNoise" fullname="SimulationThread::newPemNoise" href="simulationthread.html#newPemNoise" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="54" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPemNoise(int d, int gen)">
                <parameter type="int" name="d" default=""/>
                <parameter type="int" name="gen" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPemNoiseState" fullname="SimulationThread::newPemNoiseState" href="simulationthread.html#newPemNoiseState" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="55" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPemNoiseState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPemState" fullname="SimulationThread::newPemState" href="simulationthread.html#newPemState" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="52" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPemState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPolarisationTarget" fullname="SimulationThread::newPolarisationTarget" href="simulationthread.html#newPolarisationTarget" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="57" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPolarisationTarget(Eigen::Vector2d target)">
                <parameter type="Eigen::Vector2d" name="target" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPolariserState" fullname="SimulationThread::newPolariserState" href="simulationthread.html#newPolariserState" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="53" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPolariserState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPositions" fullname="SimulationThread::newPositions" href="simulationthread.html#newPositions" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="99" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newPositions(Eigen::Vector3d analyiserPosition, Eigen::Vector3d rayDirection, int objectsInScene)">
                <parameter type="Eigen::Vector3d" name="analyiserPosition" default=""/>
                <parameter type="Eigen::Vector3d" name="rayDirection" default=""/>
                <parameter type="int" name="objectsInScene" default=""/>
            </function>
            <function threadsafety="unspecified" name="run" fullname="SimulationThread::run" href="simulationthread.html#run" status="active" access="protected" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="44" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void run()"/>
            <function threadsafety="unspecified" name="safeAbort" fullname="SimulationThread::safeAbort" href="simulationthread.html#safeAbort" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="41" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="SimulationThread::safeAbort This safely stops the simulation and allows the last pass of the ray tracing algorithm to complete" signature="void safeAbort()"/>
            <function threadsafety="unspecified" name="simComplete" fullname="SimulationThread::simComplete" href="simulationthread.html#simComplete" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="102" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void simComplete(int &amp;polarisations)">
                <parameter type="int &amp;" name="polarisations" default=""/>
            </function>
            <function threadsafety="unspecified" name="simulate" fullname="SimulationThread::simulate" href="simulationthread.html#simulate" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="39" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="SimulationThread::simulate  Q_r  Q_i  n0_r  n0_i  graph  rep  loop_graph" signature="void simulate(double Q_r, double Q_i, double n0_r, double n0_i, kerrRotationGraph &amp;graph, ThreeDimentionalVisualisation &amp;rep, Loop_graph &amp;loop_graph)">
                <parameter type="double" name="Q_r" default=""/>
                <parameter type="double" name="Q_i" default=""/>
                <parameter type="double" name="n0_r" default=""/>
                <parameter type="double" name="n0_i" default=""/>
                <parameter type="kerrRotationGraph &amp;" name="graph" default=""/>
                <parameter type="ThreeDimentionalVisualisation &amp;" name="rep" default=""/>
                <parameter type="Loop_graph &amp;" name="loop_graph" default=""/>
            </function>
            <function threadsafety="unspecified" name="trace" fullname="SimulationThread::trace" href="simulationthread.html#trace" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="89" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void trace(int &amp;outputList, int &amp;objectsInScene, int &amp;rayCount)">
                <parameter type="int &amp;" name="outputList" default=""/>
                <parameter type="int &amp;" name="objectsInScene" default=""/>
                <parameter type="int &amp;" name="rayCount" default=""/>
            </function>
            <function threadsafety="unspecified" name="~SimulationThread" fullname="SimulationThread::~SimulationThread" href="simulationthread.html#dtor.SimulationThread" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="37" virtual="non" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="SimulationThread::~SimulationThread This clears the memory of the simulation thread. We need a mutex lock so we don't call this and lose some in progress computations" signature="~SimulationThread()"/>
            <variable threadsafety="unspecified" name="abort" fullname="SimulationThread::abort" href="simulationthread.html#abort-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="66" type="bool" static="false"/>
            <variable threadsafety="unspecified" name="condition" fullname="SimulationThread::condition" href="simulationthread.html#condition-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="65" type="int" static="false"/>
            <variable threadsafety="unspecified" name="emissionDirection" fullname="SimulationThread::emissionDirection" href="simulationthread.html#emissionDirection-var" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="68" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="emissionNoiseDist" fullname="SimulationThread::emissionNoiseDist" href="simulationthread.html#emissionNoiseDist-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="69" type="int" static="false"/>
            <variable threadsafety="unspecified" name="emissionNoiseGen" fullname="SimulationThread::emissionNoiseGen" href="simulationthread.html#emissionNoiseGen-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="70" type="int" static="false"/>
            <variable threadsafety="unspecified" name="emissionPosition" fullname="SimulationThread::emissionPosition" href="simulationthread.html#emissionPosition-var" status="active" access="public" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="67" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="laserNoise" fullname="SimulationThread::laserNoise" href="simulationthread.html#laserNoise-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="63" type="int" static="false"/>
            <variable threadsafety="unspecified" name="m_objectsInScene" fullname="SimulationThread::m_objectsInScene" href="simulationthread.html#m_objectsInScene-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="77" type="int" static="false"/>
            <variable threadsafety="unspecified" name="mutex" fullname="SimulationThread::mutex" href="simulationthread.html#mutex-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="64" type="int" static="false"/>
            <variable threadsafety="unspecified" name="pem" fullname="SimulationThread::pem" href="simulationthread.html#pem-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="74" type="PEM *" static="false"/>
            <variable threadsafety="unspecified" name="polarisingFilter" fullname="SimulationThread::polarisingFilter" href="simulationthread.html#polarisingFilter-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="75" type="PolarisingFilter *" static="false"/>
            <variable threadsafety="unspecified" name="restart" fullname="SimulationThread::restart" href="simulationthread.html#restart-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="66" type="bool" static="false"/>
            <variable threadsafety="unspecified" name="sample" fullname="SimulationThread::sample" href="simulationthread.html#sample-var" status="active" access="private" location="simulationthread.h" filepath="/Users/Bill/Documents/uni/COMP30040/simulationthread.h" lineno="73" type="SampleObject *" static="false"/>
        </class>
        <class threadsafety="unspecified" name="ThreeDimentionalVisualisation" href="threedimentionalvisualisation.html" status="internal" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="40">
            <function threadsafety="unspecified" name="ThreeDimentionalVisualisation" fullname="ThreeDimentionalVisualisation::ThreeDimentionalVisualisation" href="threedimentionalvisualisation.html#ThreeDimentionalVisualisation" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="45" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" brief="ThreeDimentionalVisualisation::ThreeDimentionalVisualisation  parent The constructor, if the 3D view is enabled then build all the objects ready to render" signature="ThreeDimentionalVisualisation(int *parent)">
                <parameter type="int *" name="parent" default="nullptr"/>
            </function>
            <function threadsafety="unspecified" name="drawObject" fullname="ThreeDimentionalVisualisation::drawObject" href="threedimentionalvisualisation.html#drawObject" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="123" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void drawObject(CollideableObject &amp;obj)">
                <parameter type="CollideableObject &amp;" name="obj" default=""/>
            </function>
            <function threadsafety="unspecified" name="newCameraPostion" fullname="ThreeDimentionalVisualisation::newCameraPostion" href="threedimentionalvisualisation.html#newCameraPostion" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="139" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::newCameraPostion  view" signature="void newCameraPostion(ObjectType view)">
                <parameter type="ObjectType" name="view" default=""/>
            </function>
            <function threadsafety="unspecified" name="newOutputFromLaser" fullname="ThreeDimentionalVisualisation::newOutputFromLaser" href="threedimentionalvisualisation.html#newOutputFromLaser" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="142" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::newOutputFromLaser  ray" signature="void newOutputFromLaser(Ray ray)">
                <parameter type="Ray" name="ray" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPemState" fullname="ThreeDimentionalVisualisation::newPemState" href="threedimentionalvisualisation.html#newPemState" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="140" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::newPemState  state" signature="void newPemState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newPolariserState" fullname="ThreeDimentionalVisualisation::newPolariserState" href="threedimentionalvisualisation.html#newPolariserState" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="141" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::newPolariserState  state" signature="void newPolariserState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="newThetas" fullname="ThreeDimentionalVisualisation::newThetas" href="threedimentionalvisualisation.html#newThetas" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="143" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void newThetas()"/>
            <function threadsafety="unspecified" name="renderRays" fullname="ThreeDimentionalVisualisation::renderRays" href="threedimentionalvisualisation.html#renderRays" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="133" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::renderRays" signature="void renderRays()"/>
            <function threadsafety="unspecified" name="setEnabledState" fullname="ThreeDimentionalVisualisation::setEnabledState" href="threedimentionalvisualisation.html#setEnabledState" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="46" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setEnabledState  state" signature="void setEnabledState(int state)">
                <parameter type="int" name="state" default=""/>
            </function>
            <function threadsafety="unspecified" name="setupAnalyser" fullname="ThreeDimentionalVisualisation::setupAnalyser" href="threedimentionalvisualisation.html#setupAnalyser" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="122" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupAnalyser Setup the analyser with the mesh from an external obj file" signature="void setupAnalyser()"/>
            <function threadsafety="unspecified" name="setupLPRays" fullname="ThreeDimentionalVisualisation::setupLPRays" href="threedimentionalvisualisation.html#setupLPRays" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="128" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupLPRays This instanciates 10 ray objects to be shown between the laser and the polarising filter. They initially are drawn in the middle of the screen but the transformation information is stored in a list global to the 3D view" signature="void setupLPRays()"/>
            <function threadsafety="unspecified" name="setupLaser" fullname="ThreeDimentionalVisualisation::setupLaser" href="threedimentionalvisualisation.html#setupLaser" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="121" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupLaser Setup the laser with a mesh from an external obj file" signature="void setupLaser()"/>
            <function threadsafety="unspecified" name="setupLineLaserToSample" fullname="ThreeDimentionalVisualisation::setupLineLaserToSample" href="threedimentionalvisualisation.html#setupLineLaserToSample" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="124" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupLineLaserToSample This sets up the green line from the laser to the sample. It works by subtracting the positions to get a vector direction and length" signature="void setupLineLaserToSample()"/>
            <function threadsafety="unspecified" name="setupLineSampleToAnalyser" fullname="ThreeDimentionalVisualisation::setupLineSampleToAnalyser" href="threedimentionalvisualisation.html#setupLineSampleToAnalyser" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="126" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupLineSampleToAnalyser This draws the line from the analyser to the sample" signature="void setupLineSampleToAnalyser()"/>
            <function threadsafety="unspecified" name="setupPARays" fullname="ThreeDimentionalVisualisation::setupPARays" href="threedimentionalvisualisation.html#setupPARays" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="131" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupPARays This instanciates 10 ray objects to be shown between the PEM and the analyser. They initially are drawn in the middle of the screen but the transformation information is stored in a list global to the 3D view" signature="void setupPARays()"/>
            <function threadsafety="unspecified" name="setupPEM" fullname="ThreeDimentionalVisualisation::setupPEM" href="threedimentionalvisualisation.html#setupPEM" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="120" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupPEM Setup the PEM with a mesh from an obj file" signature="void setupPEM()"/>
            <function threadsafety="unspecified" name="setupPSRays" fullname="ThreeDimentionalVisualisation::setupPSRays" href="threedimentionalvisualisation.html#setupPSRays" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="129" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupPSRays This instanciates 10 ray objects to be shown between the polarising filter and the sample. They initially are drawn in the middle of the screen but the transformation information is stored in a list global to the 3D view" signature="void setupPSRays()"/>
            <function threadsafety="unspecified" name="setupPolariser" fullname="ThreeDimentionalVisualisation::setupPolariser" href="threedimentionalvisualisation.html#setupPolariser" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="119" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupPolariser Setup the polarising filter object for rendering. Get the mesh from an obj file" signature="void setupPolariser()"/>
            <function threadsafety="unspecified" name="setupSPRays" fullname="ThreeDimentionalVisualisation::setupSPRays" href="threedimentionalvisualisation.html#setupSPRays" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="130" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupSPRays This instanciates 10 ray objects to be shown between the sample and the PEM. They initially are drawn in the middle of the screen but the transformation information is stored in a list global to the 3D view" signature="void setupSPRays()"/>
            <function threadsafety="unspecified" name="setupSample" fullname="ThreeDimentionalVisualisation::setupSample" href="threedimentionalvisualisation.html#setupSample" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="118" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::setupSample Setup the sample object for rendering. Get the mesh from an obj file" signature="void setupSample()"/>
            <function threadsafety="unspecified" name="updateLineLaserToSample" fullname="ThreeDimentionalVisualisation::updateLineLaserToSample" href="threedimentionalvisualisation.html#updateLineLaserToSample" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="125" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::updateLineLaserToSample This calculates the geometry for the line in terms of it's start and enf points" signature="void updateLineLaserToSample()"/>
            <function threadsafety="unspecified" name="updateLineSampleToAnalyser" fullname="ThreeDimentionalVisualisation::updateLineSampleToAnalyser" href="threedimentionalvisualisation.html#updateLineSampleToAnalyser" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="127" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="ThreeDimentionalVisualisation::updateLineSampleToAnalyser This sets up the geometry for the line to follow from the sample to the analyser" signature="void updateLineSampleToAnalyser()"/>
            <variable threadsafety="unspecified" name="LPRays" fullname="ThreeDimentionalVisualisation::LPRays" href="threedimentionalvisualisation.html#LPRays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="94" type="int" static="false"/>
            <variable threadsafety="unspecified" name="LPRaysMaterial" fullname="ThreeDimentionalVisualisation::LPRaysMaterial" href="threedimentionalvisualisation.html#LPRaysMaterial-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="84" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="LPRaysTransforms" fullname="ThreeDimentionalVisualisation::LPRaysTransforms" href="threedimentionalvisualisation.html#LPRaysTransforms-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="99" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="LaserToPolariserSpreadFactorLaserSide" fullname="ThreeDimentionalVisualisation::LaserToPolariserSpreadFactorLaserSide" href="threedimentionalvisualisation.html#LaserToPolariserSpreadFactorLaserSide-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="116" type="float" static="false"/>
            <variable threadsafety="unspecified" name="LaserToSampleSpreadFactorLaserSide" fullname="ThreeDimentionalVisualisation::LaserToSampleSpreadFactorLaserSide" href="threedimentionalvisualisation.html#LaserToSampleSpreadFactorLaserSide-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="115" type="float" static="false"/>
            <variable threadsafety="unspecified" name="PARays" fullname="ThreeDimentionalVisualisation::PARays" href="threedimentionalvisualisation.html#PARays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="97" type="int" static="false"/>
            <variable threadsafety="unspecified" name="PARaysMaterial" fullname="ThreeDimentionalVisualisation::PARaysMaterial" href="threedimentionalvisualisation.html#PARaysMaterial-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="86" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PARaysTransforms" fullname="ThreeDimentionalVisualisation::PARaysTransforms" href="threedimentionalvisualisation.html#PARaysTransforms-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="110" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PEMMaterial" fullname="ThreeDimentionalVisualisation::PEMMaterial" href="threedimentionalvisualisation.html#PEMMaterial-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="81" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PEMToAnalyiserRays" fullname="ThreeDimentionalVisualisation::PEMToAnalyiserRays" href="threedimentionalvisualisation.html#PEMToAnalyiserRays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="92" type="int" static="false"/>
            <variable threadsafety="unspecified" name="PEMToAnalyiserTransforms" fullname="ThreeDimentionalVisualisation::PEMToAnalyiserTransforms" href="threedimentionalvisualisation.html#PEMToAnalyiserTransforms-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="107" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PEMTransform" fullname="ThreeDimentionalVisualisation::PEMTransform" href="threedimentionalvisualisation.html#PEMTransform-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="74" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PSRays" fullname="ThreeDimentionalVisualisation::PSRays" href="threedimentionalvisualisation.html#PSRays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="95" type="int" static="false"/>
            <variable threadsafety="unspecified" name="PSRaysMaterial" fullname="ThreeDimentionalVisualisation::PSRaysMaterial" href="threedimentionalvisualisation.html#PSRaysMaterial-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="83" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PSRaysTransforms" fullname="ThreeDimentionalVisualisation::PSRaysTransforms" href="threedimentionalvisualisation.html#PSRaysTransforms-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="101" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PolariserTransform" fullname="ThreeDimentionalVisualisation::PolariserTransform" href="threedimentionalvisualisation.html#PolariserTransform-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="75" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="PolarisingFilterToSampleRays" fullname="ThreeDimentionalVisualisation::PolarisingFilterToSampleRays" href="threedimentionalvisualisation.html#PolarisingFilterToSampleRays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="90" type="int" static="false"/>
            <variable threadsafety="unspecified" name="PolarisingFilterToSampleTransforms" fullname="ThreeDimentionalVisualisation::PolarisingFilterToSampleTransforms" href="threedimentionalvisualisation.html#PolarisingFilterToSampleTransforms-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="103" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="QWidget" fullname="ThreeDimentionalVisualisation::QWidget" href="threedimentionalvisualisation.html#QWidget-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="42" type="int" static="false"/>
            <variable threadsafety="unspecified" name="RaySpreadFactorLaserSide" fullname="ThreeDimentionalVisualisation::RaySpreadFactorLaserSide" href="threedimentionalvisualisation.html#RaySpreadFactorLaserSide-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="114" type="float" static="false"/>
            <variable threadsafety="unspecified" name="RaySpreadFactorSampleSide" fullname="ThreeDimentionalVisualisation::RaySpreadFactorSampleSide" href="threedimentionalvisualisation.html#RaySpreadFactorSampleSide-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="113" type="float" static="false"/>
            <variable threadsafety="unspecified" name="SPRays" fullname="ThreeDimentionalVisualisation::SPRays" href="threedimentionalvisualisation.html#SPRays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="96" type="int" static="false"/>
            <variable threadsafety="unspecified" name="SPRaysMaterial" fullname="ThreeDimentionalVisualisation::SPRaysMaterial" href="threedimentionalvisualisation.html#SPRaysMaterial-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="85" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="SPRaysTransforms" fullname="ThreeDimentionalVisualisation::SPRaysTransforms" href="threedimentionalvisualisation.html#SPRaysTransforms-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="105" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="SampleToPEMRays" fullname="ThreeDimentionalVisualisation::SampleToPEMRays" href="threedimentionalvisualisation.html#SampleToPEMRays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="91" type="int" static="false"/>
            <variable threadsafety="unspecified" name="analysierPosition" fullname="ThreeDimentionalVisualisation::analysierPosition" href="threedimentionalvisualisation.html#analysierPosition-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="63" type="int" static="false"/>
            <variable threadsafety="unspecified" name="analysierTransform" fullname="ThreeDimentionalVisualisation::analysierTransform" href="threedimentionalvisualisation.html#analysierTransform-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="73" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="cameraEntity" fullname="ThreeDimentionalVisualisation::cameraEntity" href="threedimentionalvisualisation.html#cameraEntity-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="67" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="enabled" fullname="ThreeDimentionalVisualisation::enabled" href="threedimentionalvisualisation.html#enabled-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="52" type="int" static="false"/>
            <variable threadsafety="unspecified" name="filterOffet" fullname="ThreeDimentionalVisualisation::filterOffet" href="threedimentionalvisualisation.html#filterOffet-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="66" type="int" static="false"/>
            <variable threadsafety="unspecified" name="laserPosition" fullname="ThreeDimentionalVisualisation::laserPosition" href="threedimentionalvisualisation.html#laserPosition-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="64" type="int" static="false"/>
            <variable threadsafety="unspecified" name="laserToPolarisingFilterRays" fullname="ThreeDimentionalVisualisation::laserToPolarisingFilterRays" href="threedimentionalvisualisation.html#laserToPolarisingFilterRays-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="89" type="int" static="false"/>
            <variable threadsafety="unspecified" name="laserTransform" fullname="ThreeDimentionalVisualisation::laserTransform" href="threedimentionalvisualisation.html#laserTransform-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="76" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="lineLaserToSampleGeometry" fullname="ThreeDimentionalVisualisation::lineLaserToSampleGeometry" href="threedimentionalvisualisation.html#lineLaserToSampleGeometry-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="78" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="lineSampleToAnalyiserGeometry" fullname="ThreeDimentionalVisualisation::lineSampleToAnalyiserGeometry" href="threedimentionalvisualisation.html#lineSampleToAnalyiserGeometry-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="79" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="objectsInScene" fullname="ThreeDimentionalVisualisation::objectsInScene" href="threedimentionalvisualisation.html#objectsInScene-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="62" type="int" static="false"/>
            <variable threadsafety="unspecified" name="pemObject" fullname="ThreeDimentionalVisualisation::pemObject" href="threedimentionalvisualisation.html#pemObject-var" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="47" type="PEM *" static="false"/>
            <variable threadsafety="unspecified" name="pemPosition" fullname="ThreeDimentionalVisualisation::pemPosition" href="threedimentionalvisualisation.html#pemPosition-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="69" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="pemState" fullname="ThreeDimentionalVisualisation::pemState" href="threedimentionalvisualisation.html#pemState-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="53" type="int" static="false"/>
            <variable threadsafety="unspecified" name="polarisationPosition" fullname="ThreeDimentionalVisualisation::polarisationPosition" href="threedimentionalvisualisation.html#polarisationPosition-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="70" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="polariserMaterial" fullname="ThreeDimentionalVisualisation::polariserMaterial" href="threedimentionalvisualisation.html#polariserMaterial-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="82" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="polariserObject" fullname="ThreeDimentionalVisualisation::polariserObject" href="threedimentionalvisualisation.html#polariserObject-var" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="49" type="PolarisingFilter *" static="false"/>
            <variable threadsafety="unspecified" name="polariserState" fullname="ThreeDimentionalVisualisation::polariserState" href="threedimentionalvisualisation.html#polariserState-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="54" type="int" static="false"/>
            <variable threadsafety="unspecified" name="rayDirectionInit" fullname="ThreeDimentionalVisualisation::rayDirectionInit" href="threedimentionalvisualisation.html#rayDirectionInit-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="71" type="Eigen::Vector3d" static="false"/>
            <variable threadsafety="unspecified" name="rayMesh" fullname="ThreeDimentionalVisualisation::rayMesh" href="threedimentionalvisualisation.html#rayMesh-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="56" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="rootEntity" fullname="ThreeDimentionalVisualisation::rootEntity" href="threedimentionalvisualisation.html#rootEntity-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="61" type="int *" static="false"/>
            <variable threadsafety="unspecified" name="sampleObject" fullname="ThreeDimentionalVisualisation::sampleObject" href="threedimentionalvisualisation.html#sampleObject-var" status="active" access="public" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="48" type="SampleObject *" static="false"/>
            <variable threadsafety="unspecified" name="samplePositon" fullname="ThreeDimentionalVisualisation::samplePositon" href="threedimentionalvisualisation.html#samplePositon-var" status="active" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="65" type="int" static="false"/>
        </class>
        <namespace threadsafety="unspecified" name="Ui" href="ui.html" status="internal" access="private" location="mokelasersim.h" filepath="/Users/Bill/Documents/uni/COMP30040/mokelasersim.h" lineno="36" documented="false"/>
        <variable threadsafety="unspecified" name="degreeMulitplier3" status="internal" access="private" location="threedimentionalvisualisation.h" filepath="/Users/Bill/Documents/uni/COMP30040/threedimentionalvisualisation.h" lineno="34" type="const double" static="false"/>
    </namespace>
</INDEX>
